This is the list of all modules including short descriptions.

== Main

crm::

	The program. Not much here.

modules/main.py::

	Start, verify environment, compatibility with various
	software versions, read and parse options, load user
	preferences, parse user's input (lexer is shlex).

modules/levels.py::

	Levels (collections of commands) hierarchy. Takes care of the
	prompt and the stack of levels.

== User interface

modules/ui.py.in::

	User interface. All levels and commands are implemented here.

modules/completion.py::

	Tab completion for interactive use. Can show parts of the RA
	metadata. Quite convoluted at some spots.

modules/help.py.in::

	Reads help from a text file and presents parts of it in
	response to the help command. The text file has special
	anchors to demarcate help topics and command help text.

doc/crm.8.txt::

	Online help in asciidoc format. Several help topics (search
	for +[[topic_+) and command reference (search for
	+[[cmdhelp_+). Every user interface change needs to be
	reflected here. A source for the man page too.

== Global variables

modules/vars.py.in::

	Global constants and variables (it would be good to
	separate the two).

modules/userprefs.py::

	User preferences. Keeps also options variables and defaults.

== CIB configuration editing and management

modules/cibconfig.py::

	Configuration (CIB) manager. Implements most of the
	configure level. The bigest and the most complex part. There
	are three major classes:

	+CibFactory+::: operations on the CIB or parts of it.

	+CibObject+::: every CIB element is implemented in a
	subclass of +CibObject+. The configuration consists of a
	set of +CibObject+ instances (subclassed, e.g. +CibNode+ or
	+CibPrimitive+).

	+CibObjectSet+::: enables operations on sets of CIB
	elements. Two subclasses with CLI and XML presentations
	of cib elements. Most operations are going via these
	subclasses (+show+, +edit+, +save+, +filter+).
	NB: At times, some +CibObject+ instances need access to
	+CibFactory+, which is obviously less than optimal. Some
	of those can probably be replaced.

modules/idmgmt.py::

	CIB id management. Guarantees that all ids are unique.
	Mainly a helper for CibFactory.

modules/parse.py::

	CIB elements CLI parser.

modules/cliformat.py::

	A set of functions to format CIB elements (XML -> CLI
	converter).

modules/clidisplay.py::

	Embelishment class for the terminal.

modules/crm_gv.py::

	Interface to GraphViz. Generates graph specs for dotty(1).

== CIB status editing

modules/cibstatus.py::

	CIB status section editor and manipulator (cibstatus
	level). Interface to crm_simulate.

== Resource agents

modules/ra.py::

	Resource agents interface.

modules/rsctest.py::

	Resource tester (configure rsctest command).

== Cluster history

modules/report.py::

	Cluster history. Interface to logs and other relevant
	artifacts left on disk by the cluster.

modules/log_patterns.py, log_patterns_118.py::

	Pacemaker subsystems' log patterns. For versions earlier than
	1.1.8 and the latter.

== Auxiliary

modules/singletonmixin.py::

	Implementation of the singleton pattern (from activestate).
	Enables single instance use across several modules. Heavily
	(ab)used.

modules/term.py::

	Terminal driver (from activestate).

modules/schema.py, pacemaker.py::

	Support for pacemaker RNG schema.

modules/cache.py::
	A very rudimentary cache implementation. Used to cache
	results of expensive operations (i.e. ra meta).

modules/crm_pssh.py::

	Interface to pssh (parallel ssh).

modules/msg.py::

	Messages for users. Can count lines and include line
	numbers. Needs refinement.

modules/utils.py::

	A bag of useful functions. Needs more order.

modules/xmlutil.py::

	A bag of useful XML functions. Needs more order.
